{
  "description": "A select input component built with the Radix primitive: https://www.radix-ui.com/docs/primitives/components/select\n\n### Example\n\n```jsx\nState.init({\n  myValue: \"c\",\n});\n\nreturn (\n  <Widget\n    src=\"near/widget/DIG.InputSelect\"\n    props={{\n      assistiveText: \"My assistive text\",\n      groups: [\n        {\n          label: \"Group One\",\n          items: [\n            {\n              label: \"Option A\",\n              value: \"a\",\n            },\n            {\n              label: \"Option B\",\n              value: \"b\",\n              disabled: true,\n            },\n          ],\n        },\n        {\n          label: \"Group Two\",\n          items: [\n            {\n              label: \"Option C\",\n              value: \"c\",\n            },\n            {\n              label: \"Option D\",\n              value: \"d\",\n            },\n          ],\n        },\n      ],\n      label: \"My Label\",\n      placeholder: \"Placeholder...\",\n      rootProps: {\n        value: state.myValue,\n        onValueChange: (value) => {\n          State.update({ myValue: value });\n        },\n      },\n    }}\n  />\n);\n```\n\n### Props\n\n`assistiveText`\n- type: string\n- Adds assistive text to the bottom of the input. Useful for info, success, and error messages.\n\n`contentProps`\n- type: object\n- Radix `Content` props: https://www.radix-ui.com/docs/primitives/components/select#content\n\n`disabled`\n- type: boolean\n- Disables the input\n\n`groups`\n- type: array of objects\n- `group.label`: optional string to render header text\n- `group.items`: array of objects\n- `group.items.disabled`: boolean to disable item\n- `group.items.label`: string to render display text\n- `group.items.value`: string to track internal value\n\n`invalid`\n- type: boolean\n- Renders input with error variant\n\n`label`\n- type: string\n- Renders label above input\n\n`rootProps`\n- type: object\n- Radix `Root` props: https://www.radix-ui.com/docs/primitives/components/select#root\n\n`valid`\n- type: boolean\n- Renders input with success variant\n\n`value`\n- type: string\n- Current input value (should match a corresponding `group.items.value`)\n\n### HTML Attributes\n\nAll other props will be forwarded through to the `<input>` element. EG: `placeholder`.",
  "name": "DIG.InputSelect",
  "tags": {
    "dig": ""
  }
}
